"""
Django settings for Q project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import mongoengine
from configparser import ConfigParser, NoOptionError

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

PROJECT_LABEL = "Q"

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# path to the config file containing secret values...
CONF_PATH = os.path.join(os.path.expanduser('~'), '.config', 'esdoc-test.conf')
parser = ConfigParser({
    # these are default values (in-case they're not specified in the config file)...
    "debug": "false",
    "obfuscate": "false",
    "profile": "false",
    "cdn": "true",
})
parser.read(CONF_PATH)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = parser.get('settings', 'secret_key', raw=True)

DEBUG = parser.getboolean('debug', 'debug')
OBFUSCATE = parser.getboolean('debug', 'obfuscate')
PROFILE = parser.getboolean('debug', 'profile')
CDN = parser.getboolean('debug', 'cdn')
if OBFUSCATE:
    from Q.questionnaire.q_utils import decode_parameter

try:
    ALLOWED_HOSTS = parser.get('settings', 'allowed_hosts').split(',')
except NoOptionError:
    assert DEBUG, "ALLOWED_HOSTS is required if DEBUG is set to 'false'"
    ALLOWED_HOSTS = []

try:
    LEGACY_HOST = parser.get('settings', 'legacy_host')
except NoOptionError:
    LEGACY_HOST = None

try:
    ACTUAL_HOST = parser.get('settings', 'actual_host')
except NoOptionError:
    ACTUAL_HOST = None

SITE_ID = 1  # this value is potentially reset by "questionnaire/middleware/q_dynamic_sites.py"
DEFAULT_SITE_ID = 1  # and in-case it isn't reset, it will be bound to this value

WSGI_APPLICATION = 'Q.wsgi.application'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # postgres db...
    # mongodb...
    # compress & compile static files...
    'compressor',
    # restful api...
    'crispy_forms',
    'django_filters',
    'rest_framework',
    'rest_framework_mongoengine',
    # mindmaps app...
    'mindmaps',
    # questionnaire app...
    'questionnaire',
    # 3rd party authentication... [NOTE: THESE MUST COME AFTER MY APPS SO THAT TEMPLATE OVERRIDING WORKS]
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # TODO: ES-DOC WANTS GITHUB (AND NOT GOOGLE) AUTHENTICATION
    # 'allauth.socialaccount.providers.github',
    # 'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # allows site to be set dynamically based on request URL...
    'questionnaire.middleware.dynamic_sites.DynamicSitesMiddleware',
]

ROOT_URLCONF = 'Q.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': False,  # I explicitly specify the app_directories loader for caching below, so this must be False
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # added some context_processors to get access to some of the esdoc-questionnaire.conf settings...
                'questionnaire.context_processors.q_debug',
                'questionnaire.context_processors.q_obfuscate',
                'questionnaire.context_processors.q_profile',
                'questionnaire.context_processors.q_cdn',

            ],
            'loaders': [
                # cache templates for faster loading...
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.app_directories.Loader',
                    'django.template.loaders.filesystem.Loader',
                ])
                if not DEBUG else
                    # ...unless you are still debugging...
                    'django.template.loaders.app_directories.Loader',
                    'django.template.loaders.filesystem.Loader',
            ]
        },
    },
]

# no longer needed; no longer using django-angular...
# FORM_RENDERER = 'djng.forms.renderers.DjangoAngularBootstrap3Templates'

# API

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.DjangoFilterBackend',
    ],
    'PAGE_SIZE': 100
}


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# Q uses 2 databases:
# a default SQL one for most things,
# and a NOSQL one for JSON models.
# Wow!

if 'test' in sys.argv:

    # actually testing w/ postgres is  r e a l l y   s l o w
    # so, for testing, just use sqlite3...
    DATABASES = {
        'default':  {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, "questionnaire/tests/testdb.sqlite3"),
        }
    }

    # also, here is a convenient way to test emails in unit tests w/out actually sending messages...
    # (when unspecified the default email_backend is 'django.core.mail.backends.smtp.EmailBackend')
    EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

else:

    infrastructure_database_password = parser.get('infrastructure_database', 'password', raw=True)
    if OBFUSCATE:
        infrastructure_database_password = decode_parameter(infrastructure_database_password)

    DATABASES = {
        'default': {
            'ENGINE': parser.get('infrastructure_database', 'engine'),
            'NAME': parser.get('infrastructure_database', 'name'),
            'USER': parser.get('infrastructure_database', 'user'),
            'HOST': parser.get('infrastructure_database', 'host'),
            'PORT': parser.get('infrastructure_database', 'port'),
            'PASSWORD': infrastructure_database_password
        }
    }

# TODO: SHOULD I HAVE A SEPARATE TEST MONGO DB, AS ABOVE ?

MONGODB_DATABASES = {
    'documents': {
        # 'engine' is hard-coded by the mongoengine package; see the assert below
        'name': parser.get('document_database', 'name'),
        'host': parser.get('document_database', 'host'),
        'port': parser.get('document_database', 'port'),
        'tz_aware': True,  # if you use timezones in django (USE_TZ = True)
    }
}
assert parser.get('document_database', 'engine') == "mongoengine", "'mongoengine' must be the document_database engine"
mongoengine.connect('documents')        

DATABASE_ROUTERS = ['Q.questionnaire.QRouter']


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of 'allauth'
    'django.contrib.auth.backends.ModelBackend',
    # 'allauth' specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

ACCOUNT_ADAPTER = 'Q.questionnaire.q_auth.QAccountAdapter'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_PROVIDERS = {
    # can enable/disable these in the admin
    'google': {
        'SCOPE': ['email'],
        'AUTH_PARAMS': {
            'access_type': 'online'
        }
     }
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # compressed files...
    'compressor.finders.CompressorFinder',
]

MEDIA_ROOT = os.path.join(BASE_DIR, PROJECT_LABEL, 'media')
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, parser.get('settings', 'static_root', raw=True))
STATIC_URL = '/static/'

COMPRESS_ENABLED = True
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_URL = STATIC_URL
COMPRESS_OFFLINE = True  # if template variables are used inside {% compress %} tags, they must be listed here !!
COMPRESS_PRECOMPILERS = (
    ('text/coffeescript', 'coffee --compile --stdio'),
    ('text/less', 'lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/x-scss', 'sass --scss {infile} {outfile}'),
    ('text/stylus', 'stylus < {infile} > {outfile}'),
)


# how to send email...
email_host_password = parser.get('email', 'password', raw=True)
if OBFUSCATE:
    email_host_password = decode_parameter(email_host_password)
EMAIL_USE_TLS = True
EMAIL_HOST = parser.get('email', 'host')
EMAIL_PORT = parser.get('email', 'port')
EMAIL_HOST_USER = parser.get('email', 'username')
EMAIL_HOST_PASSWORD = email_host_password


# where to get help...
Q_EMAIL = parser.get('help', 'email')
Q_CODE_URL = parser.get('help', 'code_url')
Q_HELP_URL = parser.get('help', 'help_url')
